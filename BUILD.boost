load("@com_github_satok16_btboost//:boost/boost.bzl", "boost_library")

out_files = [
    "Python-ast.h",
    "Python.h",
    "abstract.h",
    "asdl.h",
    "ast.h",
    "bitset.h",
    "boolobject.h",
    "bufferobject.h",
    "bytearrayobject.h",
    "bytes_methods.h",
    "bytesobject.h",
    "cStringIO.h",
    "cellobject.h",
    "ceval.h",
    "classobject.h",
    "cobject.h",
    "code.h",
    "codecs.h",
    "compile.h",
    "complexobject.h",
    "datetime.h",
    "descrobject.h",
    "dictobject.h",
    "dtoa.h",
    "enumobject.h",
    "errcode.h",
    "eval.h",
    "fileobject.h",
    "floatobject.h",
    "frameobject.h",
    "funcobject.h",
    "genobject.h",
    "graminit.h",
    "grammar.h",
    "import.h",
    "intobject.h",
    "intrcheck.h",
    "iterobject.h",
    "listobject.h",
    "longintrepr.h",
    "longobject.h",
    "marshal.h",
    "memoryobject.h",
    "metagrammar.h",
    "methodobject.h",
    "modsupport.h",
    "moduleobject.h",
    "node.h",
    "object.h",
    "objimpl.h",
    "opcode.h",
    "osdefs.h",
    "parsetok.h",
    "patchlevel.h",
    "pgen.h",
    "pgenheaders.h",
    "py_curses.h",
    "pyarena.h",
    "pycapsule.h",
    "pyconfig.h",
    "pyctype.h",
    "pydebug.h",
    "pyerrors.h",
    "pyexpat.h",
    "pyfpe.h",
    "pygetopt.h",
    "pymacconfig.h",
    "pymactoolbox.h",
    "pymath.h",
    "pymem.h",
    "pyport.h",
    "pystate.h",
    "pystrcmp.h",
    "pystrtod.h",
    "pythonrun.h",
    "pythread.h",
    "rangeobject.h",
    "setobject.h",
    "sliceobject.h",
    "stringobject.h",
    "structmember.h",
    "structseq.h",
    "symtable.h",
    "sysmodule.h",
    "timefuncs.h",
    "token.h",
    "traceback.h",
    "tupleobject.h",
    "ucnhash.h",
    "unicodeobject.h",
    "warnings.h",
    "weakrefobject.h",
]

genrule(
    name = "boost_python_inc_symlink",
    srcs = [],
    outs = out_files,
    cmd = "\n".join([
        "export INSTALL_DIR=$$(pwd)/$(@D)",
        "export PYTHON_INCLUDE_DIR=$$(python -c 'from distutils.sysconfig import *; print get_python_inc()')",
        "echo python include dir = $$PYTHON_INCLUDE_DIR",
        "[[ ! -d $$PYTHON_INCLUDE_DIR ]] && echo $$PYTHON_INCLUDE_DIR not found.  Install libpython2.7-dev. && exit 1",
        "cd $$INSTALL_DIR",
        "rm *",
        "ln -s $$PYTHON_INCLUDE_DIR/* .",
    ]),
)

boost_library(
    name = "algorithm",
    deps = [
        ":function",
        ":range",
    ],
)

boost_library(
    name = "align",
)

boost_library(
    name = "any",
)

boost_library(
    name = "archive",
    deps = [
        ":assert",
        ":cstdint",
        ":integer",
        ":io",
        ":iterator",
        ":mpl",
        ":noncopyable",
        ":pointee",
        ":smart_ptr",
        ":spirit",
    ],
)

boost_library(
    name = "array",
    deps = [
        ":functional",
        ":swap",
    ],
)

boost_library(
    name = "asio",
    deps = [
        ":bind",
        ":date_time",
        ":regex",
    ],
)

boost_library(
    name = "assert",
)

boost_library(
    name = "atomic",
    srcs = [
        "boost/cstdint.hpp",
        "boost/memory_order.hpp",
    ],
    hdrs = [
    ],
    deps = [
        ":assert",
        ":config",
    ],
)

boost_library(
    name = "bind",
    deps = [
        ":get_pointer",
        ":is_placeholder",
        ":mem_fn",
        ":ref",
        ":visit_each",
    ],
)

boost_library(
    name = "call_traits",
)

boost_library(
    name = "cast",
)

boost_library(
    name = "cerrno",
)

boost_library(
    name = "checked_delete",
)

boost_library(
    name = "chrono",
    deps = [
        ":config",
        ":mpl",
        ":operators",
        ":predef",
        ":ratio",
        ":system",
        ":type_traits",
        ":throw_exception",
    ],
)

boost_library(
    name = "compressed_pair",
)

boost_library(
    name = "concept_archetype",
)

boost_library(
    name = "concept_check",
)

boost_library(
    name = "config",
    deps = [
        ":version",
    ],
)

boost_library(
    name = "concept",
)

boost_library(
    name = "container",
    includes = [
        "libs/container/src/",
    ],
    srcs = [
        "libs/container/src/dlmalloc_ext_2_8_6.c",
    ],
    textual_hdrs = [
        "libs/container/src/dlmalloc_2_8_6.c",
    ],
    deps = [
        ":config",
        ":core",
        ":intrusive",
        ":move",
    ],
)

boost_library(
    name = "conversion",
)

boost_library(
    name = "core",
    srcs = [
        "boost/checked_delete.hpp",
    ],
    deps = [
        ":utility",
    ],
)

boost_library(
    name = "cstdint",
)

boost_library(
    name = "current_function",
)

boost_library(
    name = "date_time",
    deps = [
        ":mpl",
        ":operators",
        ":smart_ptr",
        ":static_assert",
        ":type_traits",
    ],
)

boost_library(
    name = "detail",
    deps = [
        ":limits",
    ],
)

boost_library(
    name = "dynamic_bitset",
)

boost_library(
    name = "enable_shared_from_this",
)

boost_library(
    name = "exception",
    deps = [
        ":config",
    ],
)

boost_library(
    name = "filesystem",
    deps = [
        ":config",
        ":functional",
        ":io",
        ":iterator",
        ":range",
        ":smart_ptr",
        ":system",
        ":type_traits",
    ],
)

boost_library(
    name = "foreach",
    deps = [
        ":config",
        ":detail",
        ":mpl",
        ":noncopyable",
        ":range",
    ],
)

boost_library(
    name = "function",
    deps = [
        ":bind",
        ":type_index",
    ],
    hdrs = [
        "boost/function_equal.hpp",
    ],
)

boost_library(
    name = "function_types",
)

boost_library(
    name = "functional",
    deps = [
        ":detail",
    ],
)

boost_library(
    name = "fusion",
)

boost_library(
    name = "get_pointer",
)

boost_library(
    name = "graph",
    deps = [
        ":algorithm",
        ":foreach",
        ":function",
        ":multi_index",
        ":multi_index_container",
        ":property_map",
        ":ref",
        ":regex",
        ":parameter",
        ":pending",
        ":property_tree",
        ":typeof",
        ":unordered_set",
        ":xpressive",
    ],
)

boost_library(
    name = "heap",
    deps = [
        ":parameter",
    ],
)

boost_library(
    name = "is_placeholder",
)

boost_library(
    name = "implicit_cast",
)

boost_library(
    name = "indirect_reference",
)

boost_library(
    name = "integer",
    hdrs = [
        "boost/integer_traits.hpp",
        "boost/cstdint.hpp",
    ],
    deps = [
        ":static_assert",
    ],
)

boost_library(
    name = "iterator",
    deps = [
        ":detail",
        ":fusion",
        ":indirect_reference",
        ":static_assert",
    ],
)

boost_library(
    name = "iterator_adaptors",
)

boost_library(
    name = "intrusive",
    deps = [
        ":assert",
        ":cstdint",
        ":noncopyable",
        ":static_assert",
    ],
)

boost_library(
    name = "intrusive_ptr",
    deps = [
        ":assert",
        ":detail",
    ],
)

boost_library(
    name = "io",
)

boost_library(
    name = "iostreams",
    deps = [
        ":assert",
        ":call_traits",
        ":concept",
        ":config",
        ":detail",
        ":integer",
        ":iterator",
        ":math",
        ":noncopyable",
        ":range",
        ":ref",
        ":smart_ptr",
        ":throw_exception",
        ":type",
        ":type_traits",
        ":utility",
    ],
)

boost_library(
    name = "lexical_cast",
    hdrs = [
    ],
    deps = [
        ":array",
        ":container",
        ":math",
        ":range",
        ":numeric",
    ],
)

boost_library(
    name = "limits",
)

boost_library(
    name = "math",
    hdrs = [
        "boost/cstdint.hpp",
    ],
)

boost_library(
    name = "mem_fn",
)

boost_library(
    name = "move",
    deps = [
        ":assert",
        ":detail",
        ":static_assert",
    ],
)

boost_library(
    name = "mpl",
    deps = [
        ":move",
        ":preprocessor",
    ],
)

boost_library(
    name = "multi_index",
    deps = [
        ":foreach",
        ":serialization",
        ":static_assert",
        ":tuple",
    ],
)

boost_library(
    name = "multi_index_container",
)

boost_library(
    name = "numeric",
)

boost_library(
    name = "noncopyable",
    deps = [
        ":core",
    ],
)

boost_library(
    name = "none",
    hdrs = [
        "boost/none_t.hpp",
    ],
)

boost_library(
    name = "operators",
)

boost_library(
    name = "optional",
    deps = [
        ":none",
        ":type",
    ],
)

boost_library(
    name = "parameter",
)

boost_library(
    name = "pending",
    deps = [
        ":unordered_map",
    ],
)

boost_library(
    name = "polymorphic_cast",
)

boost_library(
    name = "pointee",
)

boost_library(
    name = "predef",
)

boost_library(
    name = "preprocessor",
)

boost_library(
    name = "program_options",
    srcs = [
        "boost/any.hpp",
        "boost/token_functions.hpp",
        "boost/token_iterator.hpp",
        "boost/tokenizer.hpp",
    ],
    deps = [
        ":bind",
        ":concept",
        ":config",
        ":cstdint",
        ":detail",
        ":function",
        ":integer",
        ":iterator",
        ":lexical_cast",
        ":noncopyable",
        ":range",
        ":shared_ptr",
        ":smart_ptr",
        ":throw_exception",
        ":type",
        ":type_index",
        ":type_traits",
        ":utility",
    ],
)

boost_library(
    name = "property_map",
    deps = [
        ":any",
        ":concept",
        ":concept_archetype",
        ":concept_check",
        ":lexical_cast",
    ],
)

boost_library(
    name = "property_tree",
    deps = [
    ],
)

boost_library(
    name = "proto",
    deps = [
    ],
)

boost_library(
    name = "python",
    copts = ["-I$(GENDIR)/external/boost"],
    srcs = [
        "libs/python/src/converter/arg_to_python_base.cpp",
        "libs/python/src/converter/builtin_converters.cpp",
        "libs/python/src/converter/from_python.cpp",
        "libs/python/src/converter/registry.cpp",
        "libs/python/src/converter/type_id.cpp",
#        "libs/python/src/numpy/dtype.cpp",
#        "libs/python/src/numpy/matrix.cpp",
#        "libs/python/src/numpy/ndarray.cpp",
#        "libs/python/src/numpy/numpy.cpp",
#        "libs/python/src/numpy/scalars.cpp",
#        "libs/python/src/numpy/ufunc.cpp",
        "libs/python/src/object/class.cpp",
        "libs/python/src/object/enum.cpp",
        "libs/python/src/object/function.cpp",
        "libs/python/src/object/function_doc_signature.cpp",
        "libs/python/src/object/inheritance.cpp",
        "libs/python/src/object/iterator.cpp",
        "libs/python/src/object/life_support.cpp",
        "libs/python/src/object/pickle_support.cpp",
        "libs/python/src/object/stl_iterator.cpp",
    ] + out_files,
    hdrs = [
    ],
    deps = [
        ":call_traits",
        ":cast",
        ":compressed_pair",
        ":config",
        ":detail",
        ":foreach",
        ":function",
        ":graph",
        ":implicit_cast",
        ":integer",
        ":iterator",
        ":lexical_cast",
        ":noncopyable",
        ":numeric",
        ":operators",
        ":pending",
        ":polymorphic_cast",
        ":shared_ptr",
        ":smart_ptr",
        ":swap",
        ":throw_exception",
        ":tuple",
        ":type",
        ":type_index",
        ":type_traits",
        ":utility",
    ],
    alwayslink = 1,
)

boost_library(
    name = "range",
    deps = [
        ":concept_check",
        ":optional",
    ],
)

boost_library(
    name = "ratio",
    deps = [
        ":integer",
    ],
)

boost_library(
    name = "ref",
    deps = [
        ":core",
    ],
)

boost_library(
    name = "regex",
    hdrs = [
        "boost/cregex.hpp",
    ],
    defines = [
        "BOOST_FALLTHROUGH",
    ],
    deps = [
        ":assert",
        ":config",
        ":cstdint",
        ":detail",
        ":exception",
        ":functional",
        ":integer",
        ":limits",
        ":mpl",
        ":predef",
        ":ref",
        ":smart_ptr",
        ":throw_exception",
        ":type_traits",
    ],
)

boost_library(
    name = "scoped_array",
    deps = [
        ":checked_delete",
    ],
)

boost_library(
    name = "scoped_ptr",
    deps = [
        ":checked_delete",
    ],
)

boost_library(
    name = "shared_ptr",
    deps = [
        ":checked_delete",
    ],
)

boost_library(
    name = "shared_array",
    deps = [
        ":checked_delete",
    ],
)

boost_library(
    name = "serialization",
    deps = [
        ":archive",
        ":array",
        ":call_traits",
        ":config",
        ":detail",
        ":function",
        ":operators",
        ":type_traits",
    ],
)

boost_library(
    name = "smart_ptr",
    hdrs = [
        "boost/make_shared.hpp",
    ],
    deps = [
        ":align",
        ":core",
        ":enable_shared_from_this",
        ":intrusive_ptr",
        ":predef",
        ":scoped_array",
        ":scoped_ptr",
        ":shared_array",
        ":shared_ptr",
        ":throw_exception",
        ":utility",
        ":weak_ptr",
    ],
)

boost_library(
    name = "spirit",
    deps = [
        ":compressed_pair",
        ":iterator_adaptors",
        ":optional",
        ":ref",
    ],
)

boost_library(
    name = "static_assert",
)

boost_library(
    name = "system",
    deps = [
        ":assert",
        ":cerrno",
        ":config",
        ":core",
        ":cstdint",
        ":noncopyable",
        ":predef",
        ":utility",
    ],
)

boost_library(
    name = "swap",
)

boost_library(
    name = "throw_exception",
    deps = [
        ":current_function",
        ":exception",
    ],
)

boost_library(
    name = "thread",
    srcs = [
        "libs/thread/src/pthread/once_atomic.cpp",
        "libs/thread/src/pthread/thread.cpp",
        "boost/atomic.hpp",
        "boost/enable_shared_from_this.hpp",
        "boost/exception_ptr.hpp",
        "boost/thread/pthread/once_atomic.hpp",
        "boost/lexical_cast.hpp",
    ],
    deps = [
        ":algorithm",
        ":atomic",
        ":bind",
        ":chrono",
        ":concept",
        ":config",
        ":core",
        "date_time",
        ":detail",
        ":function",
        ":functional",
        ":io",
        ":iterator",
        ":lexical_cast",
        ":optional",
        ":system",
        ":tuple",
        ":type",
        ":type_index",
        ":type_traits",
    ],
)

boost_library(
    name = "type",
    deps = [
        ":core",
    ],
)

boost_library(
    name = "type_index",
    deps = [
        ":core",
        ":throw_exception",
    ],
)

boost_library(
    name = "type_traits",
    hdrs = [
        "boost/aligned_storage.hpp",
    ],
    deps = [
        ":core",
        ":mpl",
        ":static_assert",
    ],
)

boost_library(
    name = "typeof",
)

boost_library(
    name = "tuple",
)

boost_library(
    name = "tr1",
    defines = [
        "BOOST_FALLTHROUGH",
    ],
    deps = [
        ":config",
    ],
)

boost_library(
    name = "unordered",
)

boost_library(
    name = "unordered_map",
    deps = [
        ":unordered",
    ],
)

boost_library(
    name = "unordered_set",
    deps = [
        ":unordered",
    ],
)

boost_library(
    name = "utility",
    hdrs = [
        "boost/next_prior.hpp",
    ],
)

boost_library(
    name = "blank",
)

boost_library(
    name = "variant",
    deps = [
        ":blank",
        ":call_traits",
        ":config",
        ":detail",
        ":functional",
        ":math",
        ":static_assert",
        ":type_index",
        ":type_traits",
        ":utility",
    ],
)

boost_library(
    name = "version",
)

boost_library(
    name = "visit_each",
)

boost_library(
    name = "weak_ptr",
)

boost_library(
    name = "xpressive",
    deps = [
        ":implicit_cast",
        ":proto",
    ]
)

boost_library(
    name = "cstdlib",
)

boost_library(
    name = "timer",
    deps = [
        ":config",
        ":system",
        ":cstdint",
        ":limits",
    ]
)

boost_library(
    name = "test",
    deps = [
        ":function",
        ":smart_ptr",
        ":type",
        ":cstdlib",
        ":current_function",
        ":type_traits",
        ":bind",
        ":config",
        ":preprocessor",
        ":mpl",
        ":optional",
        ":utility",
        ":version",
        ":core",
        ":exception",
        ":timer",
        ":io",
        ":detail",
        ":limits",
        ":static_assert",
        ":assert",
        ":call_traits",
        ":iterator",
        ":algorithm",
    ]
)
